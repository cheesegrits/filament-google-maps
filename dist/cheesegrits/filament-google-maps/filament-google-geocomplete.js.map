{"version":3,"file":"/cheesegrits/filament-google-maps/filament-google-geocomplete.js","mappings":"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","sources":["webpack://filament-google-maps/./resources/js/filament-google-geocomplete.js"],"sourcesContent":["window.filamentGoogleGeocomplete = ($wire, config) => {\r\n    return {\r\n        geocoder: null,\r\n        mapEl: null,\r\n        config: {\r\n            debug: false,\r\n            statePath: '',\r\n            gmaps: '',\r\n            filterName: null,\r\n            reverseGeocodeFields: {},\r\n            latLngFields: {},\r\n            types: [],\r\n            countries: [],\r\n            isLocation: false,\r\n            placeField: 'formatted_address',\r\n        },\r\n        symbols: {\r\n            '%n': [\"street_number\"],\r\n            '%z': [\"postal_code\"],\r\n            '%S': [\"street_address\", \"route\"],\r\n            '%A1': [\"administrative_area_level_1\"],\r\n            '%A2': [\"administrative_area_level_2\"],\r\n            '%A3': [\"administrative_area_level_3\"],\r\n            '%A4': [\"administrative_area_level_4\"],\r\n            '%A5': [\"administrative_area_level_5\"],\r\n            '%a1': [\"administrative_area_level_1\"],\r\n            '%a2': [\"administrative_area_level_2\"],\r\n            '%a3': [\"administrative_area_level_3\"],\r\n            '%a4': [\"administrative_area_level_4\"],\r\n            '%a5': [\"administrative_area_level_5\"],\r\n            '%L': [\"locality\", \"postal_town\"],\r\n            '%D': [\"sublocality_level_1\", \"sublocality\", \"political\"],\r\n            '%C': [\"country\"],\r\n            '%c': [\"country\"],\r\n            '%p': ['premise'],\r\n            '%P': ['premise'],\r\n        },\r\n\r\n        loadGMaps: function () {\r\n            if (!document.getElementById('filament-google-maps-google-maps-js')) {\r\n                const script = document.createElement('script');\r\n                script.id = 'filament-google-maps-google-maps-js';\r\n                window.filamentGoogleMapsAsyncLoad = this.createAutocomplete.bind(this);\r\n                script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\r\n                document.head.appendChild(script);\r\n            } else {\r\n                const waitForGlobal = function (key, callback) {\r\n                    if (window[key]) {\r\n                        callback();\r\n                    } else {\r\n                        setTimeout(function () {\r\n                            waitForGlobal(key, callback);\r\n                        }, 100);\r\n                    }\r\n                };\r\n\r\n                waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\r\n                    this.createAutocomplete();\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        init: function (mapEl) {\r\n            this.mapEl = mapEl;\r\n            this.config = {...this.config, ...config};\r\n            this.loadGMaps();\r\n        },\r\n\r\n        createAutocomplete: function () {\r\n            window.filamentGoogleMapsAPILoaded = true;\r\n\r\n            let fields = [\"address_components\", \"formatted_address\", \"geometry\", \"name\"];\r\n\r\n            if (!fields.includes(this.config.placeField)) {\r\n                fields.push(this.config.placeField);\r\n            }\r\n\r\n            const geocompleteOptions = {\r\n                fields: fields,\r\n                strictBounds: false,\r\n                types: this.config.types,\r\n            };\r\n\r\n            const geocompleteEl = this.config.isLocation ? this.config.statePath + '-fgm-address' : this.config.statePath;\r\n            const geoComplete = document.getElementById(geocompleteEl);\r\n\r\n            if (geoComplete) {\r\n                window.addEventListener('keydown', function (e) {\r\n                    if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\r\n                        if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\r\n                            e.preventDefault();\r\n                            return false;\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                const autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\r\n\r\n                autocomplete.setComponentRestrictions({\r\n                    country: this.config.countries,\r\n                })\r\n\r\n                autocomplete.addListener(\"place_changed\", () => {\r\n                    const place = autocomplete.getPlace();\r\n\r\n                    if (!place.geometry || !place.geometry.location) {\r\n                        window.alert(\"No details available for input: '\" + place.name + \"'\");\r\n                        return;\r\n                    }\r\n\r\n                    this.setLocation(place);\r\n                    this.updateReverseGeocode(place);\r\n                    this.updateLatLng(place);\r\n                });\r\n\r\n                const geoLocate = document.getElementById(this.config.statePath + '-geolocate');\r\n\r\n                if (geoLocate)  {\r\n                    this.geocoder = new google.maps.Geocoder();\r\n\r\n                    geoLocate.addEventListener('click',  (event) => {\r\n                        if (\"geolocation\" in navigator){\r\n                            navigator.geolocation.getCurrentPosition((position) => {\r\n                                var currentLatitude = position.coords.latitude;\r\n                                var currentLongitude = position.coords.longitude;\r\n                                var currentLocation = { lat: currentLatitude, lng: currentLongitude };\r\n\r\n                                this.geocoder\r\n                                    .geocode({location: currentLocation})\r\n                                    .then((response) => {\r\n                                        if (response.results[0]) {\r\n                                            geoComplete.setAttribute('value', response.results[0].formatted_address)\r\n                                            this.setLocation(response.results[0]);\r\n                                            this.updateReverseGeocode(response.results[0]);\r\n                                            this.updateLatLng(response.results[0]);\r\n                                        }\r\n                                    });\r\n                            });\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        setLocation: function (place) {\r\n            if (this.config.isLocation) {\r\n                $wire.set(this.config.statePath, place.geometry.location);\r\n            } else {\r\n                $wire.set(this.config.statePath, place[this.config.placeField]);\r\n            }\r\n\r\n            if (this.config.filterName) {\r\n                const latPath = this.config.filterName + '.latitude';\r\n                const lngPath = this.config.filterName + '.longitude';\r\n                const lat = document.getElementById(latPath);\r\n                const lng = document.getElementById(lngPath);\r\n\r\n                if (lat && lng) {\r\n                    lat.setAttribute('value', place.geometry.location.lat().toString());\r\n                    lng.setAttribute('value', place.geometry.location.lng().toString());\r\n                    $wire.set(latPath, place.geometry.location.lat().toString());\r\n                    $wire.set(lngPath, place.geometry.location.lng().toString());\r\n\r\n                }\r\n            }\r\n        },\r\n        updateReverseGeocode: function (place) {\r\n            if (Object.keys(this.config.reverseGeocodeFields).length > 0) {\r\n                if (place.address_components) {\r\n                    //$wire.set(config.autocomplete, response.results[0].formatted_address);\r\n                    const replacements = this.getReplacements(place.address_components);\r\n\r\n                    for (const field in this.config.reverseGeocodeFields) {\r\n                        let replaced = this.config.reverseGeocodeFields[field];\r\n\r\n                        for (const replacement in replacements) {\r\n                            replaced = replaced.split(replacement).join(replacements[replacement]);\r\n                        }\r\n\r\n                        for (const symbol in this.symbols) {\r\n                            replaced = replaced.split(symbol).join('');\r\n                        }\r\n\r\n                        replaced = replaced.trim();\r\n                        $wire.set(field, replaced)\r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n        updateLatLng: function(place) {\r\n            if (Object.keys(this.config.latLngFields).length > 0) {\r\n                if (place.geometry) {\r\n                    $wire.set(this.config.latLngFields.lat, place.geometry.location.lat().toString())\r\n                    $wire.set(this.config.latLngFields.lng, place.geometry.location.lng().toString())\r\n                }\r\n            }\r\n        },\r\n        getReplacements: function (address_components) {\r\n            let replacements = {};\r\n\r\n            address_components.forEach(component => {\r\n                for (const symbol in this.symbols) {\r\n                    if (this.symbols[symbol].indexOf(component.types[0]) !== -1) {\r\n                        if (symbol === symbol.toLowerCase()) {\r\n                            replacements[symbol] = component.short_name;\r\n                        } else {\r\n                            replacements[symbol] = component.long_name;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.config.debug) {\r\n                console.log(replacements);\r\n            }\r\n\r\n            return replacements;\r\n        }\r\n\r\n    }\r\n}\r\n"],"names":["window","filamentGoogleGeocomplete","$wire","config","geocoder","mapEl","debug","statePath","gmaps","filterName","reverseGeocodeFields","latLngFields","types","countries","isLocation","placeField","symbols","loadGMaps","document","getElementById","waitForGlobal","key","callback","setTimeout","this","createAutocomplete","bind","script","createElement","id","filamentGoogleMapsAsyncLoad","src","head","appendChild","init","_objectSpread","_this","filamentGoogleMapsAPILoaded","fields","includes","push","geocompleteOptions","strictBounds","geocompleteEl","geoComplete","addEventListener","e","code","target","nodeName","type","preventDefault","autocomplete","google","maps","places","Autocomplete","setComponentRestrictions","country","addListener","place","getPlace","geometry","location","setLocation","updateReverseGeocode","updateLatLng","alert","name","geoLocate","Geocoder","event","navigator","geolocation","getCurrentPosition","position","currentLocation","lat","coords","latitude","lng","longitude","geocode","then","response","results","setAttribute","formatted_address","set","latPath","lngPath","toString","Object","keys","length","address_components","replacements","getReplacements","field","replaced","replacement","split","join","symbol","trim","_this2","forEach","component","indexOf","toLowerCase","short_name","long_name","console","log"],"sourceRoot":""}
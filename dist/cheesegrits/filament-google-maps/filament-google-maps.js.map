{"version":3,"file":"/cheesegrits/filament-google-maps/filament-google-maps.js","mappings":"UAAIA,E,6+DCAJC,OAAOC,mBAAqB,SAACC,EAAOC,GAChC,MAAO,CACHC,IAAK,KACLC,SAAU,KACVC,OAAQ,KACRC,eAAgB,KAChBC,OAAQ,KACRC,MAAO,KACPC,MAAO,KACPP,OAAQ,CACJQ,OAAO,EACPC,aAAc,GACdC,MAAO,GACPC,UAAW,GACXC,WAAY,oBACZC,qBAAqB,EACrBC,WAAW,EACXC,iBAAiB,EACjBC,eAAgB,uBAChBC,WAAW,EACXC,WAAW,EACXC,gBAAiB,CACbC,IAAK,EACLC,IAAK,GAETC,UAAW,GACXC,SAAU,CACNC,gBAAgB,EAChBC,cAAc,EACdC,mBAAmB,EACnBC,eAAe,EACfC,mBAAmB,EACnBC,kBAAkB,EAClBC,aAAa,GAEjBC,aAAc,KACdC,gBAAgB,EAChBC,uBAAwB,EACxBC,aAAc,CACV/B,QAAQ,EACRgC,QAAQ,EACRC,WAAW,EACXC,SAAS,EACTC,UAAU,GAEdC,aAAc,KACdlC,OAAQ,GACRmC,QAAS,KACTC,aAAc,KACdC,gBAAiB,KACjBC,gBAAgB,EAChBC,qBAAsB,CAAC,EACvBC,YAAa,EACbC,qBAAqB,EACrBC,mBAAmB,EACnBC,MAAO,IAEXC,QAAS,CACL,KAAM,CAAC,iBACP,KAAM,CAAC,eACP,KAAM,CAAC,iBAAkB,SACzB,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,MAAO,CAAC,+BACR,KAAM,CAAC,WAAY,eACnB,KAAM,CAAC,eACP,KAAM,CAAC,WACP,KAAM,CAAC,WACP,KAAM,CAAC,WACP,KAAM,CAAC,YAEXC,eAAgB,KAChBC,SAAU,GACVC,UAAW,KACXC,iBAAkB,KAClBC,YAAa,CAETC,YAAa,UACbC,cAAe,MACfC,aAAc,EACdC,YAAa,IACbzC,WAAW,EACX0C,UAAU,EACVzC,WAAW,GAGf0C,cAAe,KACfC,cAAe,KACfC,YAAa,GAEbC,UAAW,WACP,GAAKC,SAASC,eAAe,uCAMtB,EACmB,SAAhBC,EAA0BC,EAAKC,GAC7BvE,OAAOsE,GACPC,IAEAC,YAAW,WACPH,EAAcC,EAAKC,EACvB,GAAG,IAEX,CAEAF,CAAc,8BAA+B,WACzCI,KAAKC,WACT,EAAEC,KAAKF,MACX,KApBqE,CACjE,IAAMG,EAAST,SAASU,cAAc,UACtCD,EAAOE,GAAK,sCACZ9E,OAAO+E,4BAA8BN,KAAKC,UAAUC,KAAKF,MACzDG,EAAOI,IAAMP,KAAKtE,OAAOgD,MAAQ,wCACjCgB,SAASc,KAAKC,YAAYN,EAC9B,CAeJ,EAEAO,KAAM,SAAU1E,EAAOC,GACnB+D,KAAKhE,MAAQA,EACbgE,KAAK/D,MAAQA,EACb+D,KAAKtE,OAAMiF,EAAAA,EAAA,GAAOX,KAAKtE,QAAWA,GAClCsE,KAAKP,WACT,EAEAQ,UAAW,WAAY,IAAAW,EAAA,KAiCnB,GAhCArF,OAAOsF,6BAA8B,GAEjCb,KAAKtE,OAAOa,qBAAuBuE,OAAOC,KAAKf,KAAKtE,OAAO4C,sBAAsB0C,OAAS,KAC1FhB,KAAKpE,SAAW,IAAIqF,OAAOC,KAAKC,UAGpCnB,KAAKrE,IAAM,IAAIsF,OAAOC,KAAKE,IAAIpB,KAAKhE,MAAK2E,EAAA,CACrCU,OAAQrB,KAAKsB,iBACbC,KAAMvB,KAAKtE,OAAO6C,aACfyB,KAAKtE,OAAOuB,WAInB+C,KAAKnE,OAAS,IAAIoF,OAAOC,KAAKM,OAAO,CACjC7E,UAAWqD,KAAKtE,OAAOiB,UACvBhB,IAAKqE,KAAKrE,MAGdqE,KAAKnE,OAAO4F,YAAYzB,KAAKsB,kBAEzBtB,KAAKtE,OAAOkB,WACZoD,KAAKrE,IAAI+F,YAAY,SAAS,SAACC,GAC3Bf,EAAKgB,YAAYD,EACrB,IAGA3B,KAAKtE,OAAOiB,WACZsE,OAAOC,KAAKS,MAAMD,YAAY1B,KAAKnE,OAAQ,WAAW,SAAC8F,GACnDf,EAAKgB,YAAYD,EACrB,IAGA3B,KAAKtE,OAAOuB,SAASM,iBAAkB,CACvC,IAAMsE,EAAQ7B,KAAK/D,MACb6F,EAAY,IAAIb,OAAOC,KAAKa,OAAOC,UAAUH,GACnD7B,KAAKrE,IAAIsB,SAASgE,OAAOC,KAAKe,gBAAgBC,UAAUC,KAAKN,GAC7DC,EAAUJ,YAAY,kBAAkB,WACpCG,EAAMO,MAAQ,GACdxB,EAAK9E,eAAiBgG,EAAUO,YAAY,GAAGC,SAASC,QAC5D,GACJ,CAgBA,GAdIvC,KAAKtE,OAAO+C,oBACZuB,KAAKT,cAAgB,IAAI0B,OAAOC,KAAKa,OAAOS,cAAcxC,KAAKrE,MAGnEqE,KAAKR,YAAc,CAAC,qBAAsB,oBAAqB,WAAY,QAEtEQ,KAAKR,YAAYiD,SAASzC,KAAKtE,OAAOY,aACvC0D,KAAKR,YAAY2C,KAAKnC,KAAKtE,OAAOY,YAGlC0D,KAAKtE,OAAO+C,mBACZuB,KAAKR,YAAY2C,KAAK,UAGtBnC,KAAKtE,OAAOS,aAAc,CAC1B,IAAMuG,EAAchD,SAASC,eAAeK,KAAKtE,OAAOS,cAExD,GAAIuG,EAAa,CACbnH,OAAOoH,iBAAiB,WAAW,SAAUC,GACzC,IAAc,WAAVA,EAAE/C,KAA8B,UAAV+C,EAAE/C,KAA8B,UAAX+C,EAAEC,OACnB,UAAtBD,EAAEE,OAAOC,UAA0C,SAAlBH,EAAEE,OAAOE,KAE1C,OADAJ,EAAEK,kBACK,CAGnB,IAAG,GAEH,IAAMC,EAAqB,CACvBC,OAAQnD,KAAKR,YACb4D,cAAc,EACdhH,MAAO4D,KAAKtE,OAAOU,OAGjBD,EAAe,IAAI8E,OAAOC,KAAKa,OAAOsB,aAAaX,EAAaQ,GAEtE/G,EAAamH,yBAAyB,CAClCC,QAASvD,KAAKtE,OAAOW,YAGzBF,EAAauF,YAAY,iBAAiB,WACtC,IAAM8B,EAAQrH,EAAasH,WAEtBD,EAAMlB,UAAakB,EAAMlB,SAASC,UAKnCiB,EAAMlB,SAASoB,SACf9C,EAAKjF,IAAIgI,UAAUH,EAAMlB,SAASoB,UAElC9C,EAAKjF,IAAIiI,UAAUJ,EAAMlB,SAASC,UAGtC9G,EAAMoI,IAAIjD,EAAKlF,OAAOS,aAAcqH,EAAM5C,EAAKlF,OAAOY,aACtDsE,EAAK/E,OAAO4F,YAAY+B,EAAMlB,SAASC,UACvC3B,EAAK9E,eAAiB0H,EAAMlB,SAASC,SACrC3B,EAAKkD,eAAeN,EAAMlB,SAASC,UACnC3B,EAAKmD,mCAAmCP,EAAMQ,oBAC1CpD,EAAKlF,OAAO+C,mBACZhD,EAAMgD,kBAAkBmC,EAAKlF,OAAOsB,UAAWwG,IAhB/CjI,OAAO0I,MAAM,oCAAsCT,EAAMU,KAAO,IAkBxE,GACJ,CACJ,CAiCA,GA/BIlE,KAAKtE,OAAOK,SACZiE,KAAKjE,OAASiE,KAAKtE,OAAOK,OAAOJ,KAAI,SAACwI,GACjB,IAAIlD,OAAOC,KAAKkD,SAAS,CACtCC,IAAKF,EACLxI,IAAKiF,EAAKjF,MAGL+F,YAAY,SAAS,SAAC4C,GACdA,EAASC,YAAYC,WACtC,GACJ,KAGAxE,KAAKtE,OAAOwC,UACR8B,KAAKtE,OAAO2C,eACZ2B,KAAKjB,iBAAmBiB,KAAKrE,IAAI8I,KAEjCzE,KAAKjB,iBAAmB,IAAIkC,OAAOC,KAAKwD,KAGxC,QAAQC,KAAK3E,KAAKtE,OAAOwC,SACzB8B,KAAKjB,iBAAiB6F,YAAY5E,KAAKtE,OAAOwC,SAE9C8B,KAAKjB,iBAAiB8F,WAAWC,KAAKC,MAAM/E,KAAKtE,OAAOwC,WAI5D8B,KAAKtE,OAAOe,iBACZuD,KAAKgF,cAGLhF,KAAKtE,OAAOc,WAAa,gBAAiByI,UAAW,CACrD,IAAMC,EAAiBxF,SAASU,cAAc,UAE9C8E,EAAeC,YAAcnF,KAAKtE,OAAOgB,eACzCwI,EAAeE,UAAUC,IAAI,6BAC7BrF,KAAKrE,IAAIsB,SAASgE,OAAOC,KAAKe,gBAAgBqD,YAAYnD,KAAK+C,GAE/DA,EAAevC,iBAAiB,SAAS,SAACC,GACtCA,EAAEK,iBACFrC,EAAKoE,aACT,GACJ,CAEA,GAAIhF,KAAKtE,OAAOgC,iBACZsC,KAAKrE,IAAI8I,KAAKc,SAAS,CACnB3I,WAAW,EACX4I,OAAQ,KACR7I,WAAW,EACX0C,UAAU,EACVD,YAAa,EACbqG,SAAS,IAIbzF,KAAKpB,eAAiB,IAAIqC,OAAOC,KAAKwE,QAAQC,eAAe,CACzDC,YAAa,KACblI,gBAAgB,EAChBmI,sBAAuB,CACnBC,SAAU9F,KAAKtE,OAAOiC,uBACtBC,aAAc,GAAFmI,OAAAC,EACJhG,KAAKtE,OAAOkC,aAAa/B,OAAS,CAACoF,OAAOC,KAAKwE,QAAQO,YAAYC,QAAU,IAAEF,EAC/EhG,KAAKtE,OAAOkC,aAAaC,OAAS,CAACoD,OAAOC,KAAKwE,QAAQO,YAAYE,QAAU,IAAEH,EAC/EhG,KAAKtE,OAAOkC,aAAaG,QAAU,CAACkD,OAAOC,KAAKwE,QAAQO,YAAYG,SAAW,IAAEJ,EACjFhG,KAAKtE,OAAOkC,aAAaI,SAAW,CAACiD,OAAOC,KAAKwE,QAAQO,YAAYI,UAAY,IAAEL,EACnFhG,KAAKtE,OAAOkC,aAAaE,UAAY,CAACmD,OAAOC,KAAKwE,QAAQO,YAAYK,WAAa,MAG/FC,cAAe,CACX5J,WAAW,GAEf6J,gBAAiB,CACb7J,WAAW,EACX0C,UAAU,GAEdoH,iBAAkBzG,KAAKhB,YACvB0H,cAAe1G,KAAKhB,YACpB2H,eAAgB3G,KAAKhB,cAGzBgB,KAAKpB,eAAegI,OAAO5G,KAAKrE,KAChCsF,OAAOC,KAAKS,MAAMD,YAAY1B,KAAKpB,eAAgB,uBAAuB,WACtEgC,EAAKiG,gBACT,IAKI7G,KAAKtE,OAAOuC,cAAc,CAC1B+B,KAAKlB,UAAY,IAAImC,OAAOC,KAAKwD,KAEjC,IAAIoC,EAAUrL,EAAMsL,IAAI/G,KAAKtE,OAAOuC,cACpC6I,GAAW9G,KAAKgH,uBAAuBlC,KAAKC,MAAM+B,IAElD7F,OAAOC,KAAKS,MAAMD,YAAY1B,KAAKpB,eAAgB,mBAAmB,SAAC+C,GACnEA,EAAMsF,QAAQjE,KAAOrB,EAAMqB,KAC3BrB,EAAMsF,QAAQ5G,GAAKO,EAAKsG,OACxBvF,EAAMsF,QAAQE,QAAUvG,EAAKwG,gBAAgBzF,EAAMsF,SACnDrG,EAAKyG,iBAAiB1F,EAAMsF,SAC5BrG,EAAK/B,SAASsD,KAAKR,EAAMsF,SAErBtF,EAAMqB,MAAQ/B,OAAOC,KAAKwE,QAAQO,YAAYC,SAE9CtF,EAAKhC,eAAe0I,eAAe,MACnC1G,EAAK2G,aAAa5F,EAAMsF,UAG5BrG,EAAK4G,iBACT,GACJ,CAER,EACA5F,YAAa,SAAUD,GAAO,IAAA8F,EAAA,KAC1BzH,KAAK0H,gBAAgB/F,EAAMgG,QAC3B3H,KAAKlE,eAAiB6F,EAAMgG,OAAOC,SACnC5H,KAAK8D,eAAe9D,KAAKlE,gBACzBkE,KAAK6H,mBAAmB7H,KAAKlE,gBAI7BkE,KAAKrE,IAAImM,MAAM9H,KAAKlE,gBAEhBkE,KAAKtE,OAAO+C,mBAAqBkD,EAAMoG,SACvC/H,KAAKT,cAAcyI,WACf,CACID,QAASpG,EAAMoG,QACf5E,OAAQnD,KAAKR,cAEjB,SAACyI,EAASC,GACK,OAAXA,GAAmBzM,EAAMgD,kBAAkBgJ,EAAK/L,OAAOsB,UAAWiL,EACtE,GAGZ,EACAE,oBAAqB,WACjB,IAAM5F,EAAWvC,KAAKsB,iBAChBxF,EAAiBkE,KAAKnE,OAAOuM,cAE7B7F,EAASzF,MAAQhB,EAAegB,OAASyF,EAASxF,MAAQjB,EAAeiB,QAC3EiD,KAAK6H,mBAAmBtF,GACxBvC,KAAKqI,UAAU9F,GAEvB,EACA8F,UAAW,SAAUvC,GACjB9F,KAAKnE,OAAO4F,YAAYqE,GACxB9F,KAAKrE,IAAImM,MAAMhC,EACnB,EACA+B,mBAAoB,SAAUtF,GAAU,IAAA+F,EAAA,MAChCtI,KAAKuI,qBAAuBvI,KAAKwI,2BACjCxI,KAAKpE,SACA6M,QAAQ,CAAClG,SAAAA,IACTmG,MAAK,SAACC,GACHL,EAAKvE,mCAAmC4E,EAASV,QAAQ,GAAGjE,oBAC5DsE,EAAKM,uCAAuCD,EAASV,QAAQ,GAAGY,mBAC5DP,EAAK5M,OAAO8C,qBACZ/C,EAAM+C,oBAAoB8J,EAAK5M,OAAOsB,UAAW2L,EAEzD,IAAE,OACK,SAACG,GACJC,QAAQC,IAAIF,EAAMG,QACtB,GAEZ,EACAlF,mCAAoC,SAAUC,GAC1C,GAAIhE,KAAKuI,oBAAqB,CAC1B,IAAMW,EAAelJ,KAAKmJ,gBAAgBnF,GAE1C,IAAK,IAAMoF,KAASpJ,KAAKtE,OAAO4C,qBAAsB,CAClD,IAAI+K,EAAWrJ,KAAKtE,OAAO4C,qBAAqB8K,GAChD,IAAK,IAAME,KAAeJ,EACtBG,EAAWA,EAASE,MAAMD,GAAaE,KAAKN,EAAaI,IAG7D,IAAK,IAAMG,KAAUzJ,KAAKrB,QACtB0K,EAAWA,EAASE,MAAME,GAAQD,KAAK,IAG3CH,EAAWA,EAASK,OACpBjO,EAAMoI,IAAIuF,EAAOC,EACrB,CACJ,CACJ,EACAM,0BAA2B,SAAUpH,GAAU,IAAAqH,EAAA,KACvC5J,KAAKuI,qBACLvI,KAAKpE,SACA6M,QAAQ,CAAClG,SAAAA,IACTmG,MAAK,SAACC,GAAQ,OAAKA,EAASV,QAAQ,GAAGjE,kBAAkB,IACzD0E,MAAK,SAAC1E,GAAkB,OAAK4F,EAAK7F,mCAAmCC,EAAmB,IAAC,OACnF,SAAC8E,GACJC,QAAQC,IAAIF,EAAMG,QACtB,GAEZ,EACAL,uCAAwC,SAAUiB,GAC1C7J,KAAKwI,0BACL/M,EAAMoI,IAAI7D,KAAKtE,OAAOS,aAAc0N,EAE5C,EACAC,+BAAgC,SAAUvH,GAAU,IAAAwH,EAAA,KAC5C/J,KAAKwI,0BACLxI,KAAKpE,SACA6M,QAAQ,CAAClG,SAAUA,IACnBmG,MAAK,SAACC,GACCA,EAASV,QAAQ,IACjBxM,EAAMoI,IAAIkG,EAAKrO,OAAOS,aAAcwM,EAASV,QAAQ,GAAGY,kBAEhE,IAAE,OACK,SAACC,GACJC,QAAQC,IAAIF,EAAMG,QACtB,GAEZ,EACAT,uBAAwB,WACpB,OAAOxI,KAAKtE,OAAOS,cAAgB6D,KAAKtE,OAAOa,mBACnD,EACAgM,kBAAmB,WACf,OAAOzH,OAAOC,KAAKf,KAAKtE,OAAO4C,sBAAsB0C,OAAS,GAAKhB,KAAKtE,OAAO8C,mBACnF,EACAsF,eAAgB,SAAUgC,GACtBrK,EAAMoI,IAAI7D,KAAKtE,OAAOsB,UAAW8I,EACrC,EACAxE,eAAgB,WACZ,IAAIiB,EAAW9G,EAAMsL,IAAI/G,KAAKtE,OAAOsB,WAIrC,OAHiB,OAAbuF,GAAsBA,EAASyH,eAAe,SAC9CzH,EAAW,CAACzF,IAAKkD,KAAKtE,OAAOmB,gBAAgBC,IAAKC,IAAKiD,KAAKtE,OAAOmB,gBAAgBE,MAEhFwF,CACX,EACAyC,YAAa,WAAY,IAAAiF,EAAA,KACrBhF,UAAUiF,YAAYC,oBAAmB,SAACrE,GACtCmE,EAAKnO,eAAiB,CAClBgB,IAAKgJ,EAASsE,OAAOC,SACrBtN,IAAK+I,EAASsE,OAAOE,WAEzBL,EAAKnG,eAAemG,EAAKnO,gBAGzBmO,EAAKpC,mBAAmBoC,EAAKnO,gBAC7BmO,EAAKtO,IAAImM,MAAMmC,EAAKnO,eACxB,GACJ,EAEAqN,gBAAiB,SAAUnF,GAAoB,IAAAuG,EAAA,KACvCrB,EAAe,CAAC,EAkBpB,OAhBAlF,EAAmBwG,SAAQ,SAAAC,GACvB,IAAK,IAAMhB,KAAUc,EAAK5L,SACoC,IAAtD4L,EAAK5L,QAAQ8K,GAAQiB,QAAQD,EAAUrO,MAAM,MACzCqN,IAAWA,EAAOkB,cAClBzB,EAAaO,GAAUgB,EAAUG,WAEjC1B,EAAaO,GAAUgB,EAAUI,UAIjD,IAEI7K,KAAKtE,OAAOQ,OACZ6M,QAAQC,IAAIE,GAGTA,CACX,EAEA4B,gBAAiB,SAAU3D,GACvB,IAAI4D,EAAW,KACf,OAAQ5D,EAAQ6D,WAAWhI,MACvB,KAAK/B,OAAOC,KAAKwE,QAAQO,YAAYC,OACjC6E,EAAW,IAAI9J,OAAOC,KAAKM,OAAO,CAC9BnB,GAAI8G,EAAQ6D,WAAW3K,GACvB2C,KAAMmE,EAAQ6D,WAAWhI,KACzB8C,SAAU,IAAI7E,OAAOC,KAAK+J,OAAO9D,EAAQ7E,SAAS4I,YAAY,GAAI/D,EAAQ7E,SAAS4I,YAAY,IAC/FvO,WAAW,IAEf,MACJ,KAAKsE,OAAOC,KAAKwE,QAAQO,YAAYK,UACjC,IAAI6E,EAAK,IAAIlK,OAAOC,KAAK+J,OAAO9D,EAAQ7E,SAAS4I,YAAY,GAAG,GAAG,GAAI/D,EAAQ7E,SAAS4I,YAAY,GAAG,GAAG,IACtGE,EAAK,IAAInK,OAAOC,KAAK+J,OAAO9D,EAAQ7E,SAAS4I,YAAY,GAAG,GAAG,GAAI/D,EAAQ7E,SAAS4I,YAAY,GAAG,GAAG,IAC1GH,EAAW,IAAI9J,OAAOC,KAAKmK,UAAUvK,OAAOwK,OAAO,CAAC,EAAGtL,KAAKhB,YAAa,CACrEqB,GAAI8G,EAAQ6D,WAAW3K,GACvB2C,KAAMmE,EAAQ6D,WAAWhI,KAEzBuI,OAAQ,IAAItK,OAAOC,KAAKsK,aAAaJ,EAAID,GACzC9L,UAAU,KAEd,MACJ,KAAK4B,OAAOC,KAAKwE,QAAQO,YAAYG,QACjC2E,EAAW,IAAI9J,OAAOC,KAAKuK,QAAQ3K,OAAOwK,OAAO,CAAC,EAAGtL,KAAKhB,YAAa,CACnEqB,GAAI8G,EAAQ6D,WAAW3K,GACvB2C,KAAMmE,EAAQ6D,WAAWhI,KAEzB0I,MAAO1L,KAAK2L,oBAAoBxE,EAAQ7E,SAAS4I,aACjD7L,UAAU,KAEd,MACJ,KAAK4B,OAAOC,KAAKwE,QAAQO,YAAYI,SACjC0E,EAAW,IAAI9J,OAAOC,KAAK0K,SAAS,CAChCvL,GAAI8G,EAAQ6D,WAAW3K,GACvB2C,KAAMmE,EAAQ6D,WAAWhI,KAEzB6I,KAAM7L,KAAK2L,oBAAoB,CAACxE,EAAQ7E,SAAS4I,cAAcY,MAAM,GACrEnP,WAAW,EACX0C,UAAU,IAEd,MACJ,KAAK4B,OAAOC,KAAKwE,QAAQO,YAAYE,OACjC4E,EAAW,IAAI9J,OAAOC,KAAK6K,OAAOjL,OAAOwK,OAAO,CAAC,EAAGtL,KAAKhB,YAAa,CAClEqB,GAAI8G,EAAQ6D,WAAW3K,GACvB2C,KAAMmE,EAAQ6D,WAAWhI,KAEzB3B,OAAQ,IAAIJ,OAAOC,KAAK+J,OAAO9D,EAAQ7E,SAAS4I,YAAY,GAAI/D,EAAQ7E,SAAS4I,YAAY,IAC7Fc,OAAQ7E,EAAQ6D,WAAWgB,OAC3B3M,UAAU,KAKtB,OAAO0L,CACX,EAEA3D,gBAAiB,SAAUH,GACvB,IAAIgF,EAAoBjM,KAAKkM,kBAAkBjF,GAC/C,OAAOjH,KAAKlB,UAAUuG,IAAI,IAAIpE,OAAOC,KAAKwD,KAAKyH,QAAQ,CACnD7J,SAAU2J,EAAkB3J,SAC5B0I,WAAYlK,OAAOwK,OAAO,CACtBjL,GAAIL,KAAKkH,OACTlE,KAAMiE,EAAQjE,MACfiJ,EAAkBjC,eAAe,cAAgBiC,EAAkBjB,WAAa,CAAC,KAE5F,EAEAkB,kBAAmB,SAAUjF,EAASmF,GAClC,OAAQnF,EAAQjE,MACZ,KAAK/B,OAAOC,KAAKwE,QAAQO,YAAYC,OACjC,OAAOkG,EAAe,IAAInL,OAAOC,KAAKwD,KAAK2H,MAAMpF,EAAQmB,eAAiB,CACtE9F,SAAU,IAAIrB,OAAOC,KAAKwD,KAAK2H,MAAMpF,EAAQmB,gBAErD,KAAKnH,OAAOC,KAAKwE,QAAQO,YAAYK,UACjC,IAAIgG,EAAIrF,EAAQsF,YACZC,EAAI,CAACF,EAAEG,eAAgB,CACnB3P,IAAKwP,EAAEG,eAAe3P,MACtBC,IAAKuP,EAAEI,eAAe3P,OACvBuP,EAAEI,eAAgB,CACjB3P,IAAKuP,EAAEG,eAAe1P,MACtBD,IAAKwP,EAAEI,eAAe5P,QAE9B,OAAOsP,EAAe,IAAInL,OAAOC,KAAKwD,KAAK+G,QAAQ,CAACe,IAAM,CACtDlK,SAAU,IAAIrB,OAAOC,KAAKwD,KAAK+G,QAAQ,CAACe,KAEhD,KAAKvL,OAAOC,KAAKwE,QAAQO,YAAYG,QACjC,OAAOgG,EAAe,IAAInL,OAAOC,KAAKwD,KAAK+G,QAAQ,CAACxE,EAAQ0F,UAAUC,aAAe,CACjFtK,SAAU,IAAIrB,OAAOC,KAAKwD,KAAK+G,QAAQ,CAACxE,EAAQ0F,UAAUC,cAElE,KAAK3L,OAAOC,KAAKwE,QAAQO,YAAYI,SACjC,OAAO+F,EAAe,IAAInL,OAAOC,KAAKwD,KAAKmI,WAAW5F,EAAQ0F,UAAUC,YAAc,CAClFtK,SAAU,IAAIrB,OAAOC,KAAKwD,KAAKmI,WAAW5F,EAAQ0F,UAAUC,aAEpE,KAAK3L,OAAOC,KAAKwE,QAAQO,YAAYE,OACjC,OAAOiG,EAAe,IAAInL,OAAOC,KAAKwD,KAAK2H,MAAMpF,EAAQ6F,aAAe,CACpE9B,WAAY,CACRgB,OAAQ/E,EAAQ8F,aAEpBzK,SAAU,IAAIrB,OAAOC,KAAKwD,KAAK2H,MAAMpF,EAAQ6F,cAG7D,EAEAnB,oBAAqB,SAAUqB,GAC3B,IAAIC,EAAQ,IAAIhM,OAAOC,KAAKgM,SAiB5B,OAfA,SAASC,EAAUC,EAAIC,GACF,GAAbD,EAAGpM,QAAiBsM,MAAMC,QAAQH,EAAG,KAAQE,MAAMC,QAAQH,EAAG,KAC9DC,EAAOlL,KAAK,IAAIlB,OAAOC,KAAK+J,OAAOmC,EAAG,GAAIA,EAAG,KACjD,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAAGpM,OAAQgM,IACtBM,MAAMC,QAAQH,EAAGJ,KACtBG,EAAUC,EAAGJ,GAAKK,EAA2B,GAAhBD,EAAGJ,GAAGhM,QAAiBsM,MAAMC,QAAQH,EAAGJ,GAAG,KAAQM,MAAMC,QAAQH,EAAGJ,GAAG,IAAiBK,EAAOvB,MAAMuB,EAAOlL,KAAK,IAAIlB,OAAOC,KAAKgM,UAAc,GAAhEG,EAAqEJ,EAAMnB,MAAMmB,EAAM9K,KAAK,IAAIlB,OAAOC,KAAKgM,UAAc,GAE9O,CAMAC,CAAUH,GAEHC,CACX,EAEAjG,uBAAwB,SAAUF,GAC9B,GAAIwG,MAAMC,QAAQzG,EAAQ0G,WAAa1G,EAAQ0G,SAASxM,OAAS,EAAG,CAEhE,IADA,IAAIuK,EAAS,IAAItK,OAAOC,KAAKsK,aACpBiC,EAAI,EAAGA,EAAI3G,EAAQ0G,SAASxM,OAAQyM,IAAK,CAC9C,IAAIxG,EAAUjH,KAAK8K,gBAAgBhE,EAAQ0G,SAASC,IACpDxG,EAAQE,QAAUnH,KAAKoH,gBAAgBH,GACvCjH,KAAKqH,iBAAiBJ,GACtBA,EAAQE,QAAQuG,cAAcC,eAAc,SAAUC,GAClDrC,EAAOsC,OAAOD,EAClB,IAEA3G,EAAQL,OAAO5G,KAAKrE,KACpBqE,KAAKnB,SAASsD,KAAK8E,EACvB,CACAjH,KAAKrE,IAAIgI,UAAU4H,EACvB,CACJ,EAEAlE,iBAAkB,SAAUJ,GAAS,IAAA6G,EAAA,KACjC,OAAQ7G,EAAQjE,MACZ,KAAK/B,OAAOC,KAAKwE,QAAQO,YAAYI,SACjCpF,OAAOC,KAAKS,MAAMD,YAAYuF,EAAQ0F,UAAW,UAAU,WAClD1F,EAAQ8G,OACT9G,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,kBAEb,IACAvG,OAAOC,KAAKS,MAAMD,YAAYuF,EAAQ0F,UAAW,aAAa,WAC1D1F,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,iBACT,IACAvG,OAAOC,KAAKS,MAAMD,YAAYuF,EAAQ0F,UAAW,aAAa,WAC1D1F,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,iBACT,IACA,MACJ,KAAKvG,OAAOC,KAAKwE,QAAQO,YAAYG,QAEjC,IADA,IAAMsF,EAAQzE,EAAQgH,WACbzB,EAAI,EAAGA,EAAId,EAAMwC,YAAa1B,IACnC,IAAK,IAAI2B,EAAK,EAAGA,EAAKzC,EAAMI,MAAMU,GAAG0B,YAAaC,IAC9ClN,OAAOC,KAAKS,MAAMD,YAAYgK,EAAMI,MAAMU,GAAI,UAAU,WAC/CvF,EAAQ8G,OACT9G,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,kBAEb,IACAvG,OAAOC,KAAKS,MAAMD,YAAYgK,EAAMI,MAAMU,GAAI,aAAa,WACvDvF,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,iBACT,IACAvG,OAAOC,KAAKS,MAAMD,YAAYgK,EAAMI,MAAMU,GAAI,aAAa,WACvDvF,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,iBACT,IAER,MACJ,KAAKvG,OAAOC,KAAKwE,QAAQO,YAAYK,UACjCrF,OAAOC,KAAKS,MAAMD,YAAYuF,EAAS,kBAAkB,WAChDA,EAAQ8G,OACT9G,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,kBAEb,IACA,MACJ,KAAKvG,OAAOC,KAAKwE,QAAQO,YAAYE,OACjClF,OAAOC,KAAKS,MAAMD,YAAYuF,EAAS,kBAAkB,WACrDA,EAAQE,QAAQiH,YAAY,SAAUN,EAAK5B,kBAAkBjF,GAAS+D,WAAWgB,QACjF8B,EAAKtG,iBACT,IAGR,GAAIP,EAAQjE,OAAS/B,OAAOC,KAAKwE,QAAQO,YAAYC,OAAQ,CACzD,IAAImI,EAAOrO,KACXiB,OAAOC,KAAKS,MAAMD,YAAYuF,EAAS,SAAS,SAAUtF,GACtD0M,EAAK9G,aAAavH,KACtB,GACJ,CACAiB,OAAOC,KAAKS,MAAMD,YAAYuF,EAAS,aAAa,WAChDA,EAAQ8G,MAAO,CACnB,IACA9M,OAAOC,KAAKS,MAAMD,YAAYuF,EAAS,WAAW,WAC1CA,EAAQ8G,OACR9G,EAAQ8G,MAAO,EACf9G,EAAQE,QAAQ6G,YAAYF,EAAK5B,kBAAkBjF,GAAS,IAC5D6G,EAAKtG,kBAEb,GACJ,EAEAA,gBAAiB,WAAY,IAAA8G,EAAA,KACrBtO,KAAKtE,OAAOuC,cACZ+B,KAAKlB,UAAUyP,WAAU,SAACC,GACtB/S,EAAMoI,IAAIyK,EAAK5S,OAAOuC,aAAc6G,KAAK2J,UAAUD,GACvD,GAER,EAEAtH,KAAM,WACF,SAASwH,IACL,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WACvBC,SAAS,IACTC,UAAU,EACnB,CAEA,OAAOL,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAC3CA,IAAO,IAAMA,IAAOA,IAAOA,GACnC,EAEAnH,aAAc,SAAUyH,GACpBhP,KAAK6G,iBACL7G,KAAKV,cAAgB0P,EAGrBhP,KAAKnB,SAAS2L,SAAQ,SAAUyE,GACxBD,GAASC,EAAK5O,IAAM2O,EAAM3O,IACtB4O,EAAKC,cACLF,EAAMG,WAAW,CACblQ,YAAa,UACbC,cAAe,QAGnB8P,EAAMG,WAAW,CACblQ,YAAa,UACbC,cAAe,QAGvB+P,EAAKG,aAAaH,EAAKC,gBAEvBD,EAAKG,aAAY,EAEzB,GACJ,EAEAvI,eAAgB,WACZ7G,KAAKV,cAAgB,KAErBU,KAAKnB,SAAS2L,SAAQ,SAAUyE,GAC5BA,EAAKG,aAAY,GACjBH,EAAKE,WAAW,CAEZlQ,YAAa,UACbC,cAAe,OAEvB,GACJ,EAEAwI,gBAAiB,SAAUC,GAAQ,IAAA0H,EAAA,KAC/B,GAAIrP,KAAKtE,OAAOwC,SAAW8B,KAAKtE,OAAOyC,aAAc,CACjD,IAiBImR,EAjBA9B,EAAW,GACX1O,EAAY,IAAImC,OAAOC,KAAKwD,KAChC1E,KAAKjB,iBAAiByL,SAAQ,SAACrD,GAC3B,GAAwC,YAApCA,EAAQuG,cAAc6B,UAAyB,CAC/C,IAAIC,EAAO,IAAIvO,OAAOC,KAAKuK,QAAQ,CAC/BI,KAAM1E,EAAQuG,cAAc5B,MAAM,GAAGc,aAErC3L,OAAOC,KAAKoB,SAASkN,KAAKC,iBAAiB9H,EAAQ6H,KAC/CH,EAAK3T,OAAO0C,gBACZoP,EAASrL,KAAKgF,EAAQuI,YAAYL,EAAK3T,OAAO0C,kBAE9CU,EAAUuG,IAAI8B,GAG1B,CACJ,IAGInH,KAAKtE,OAAO0C,iBACZkR,EAAexK,KAAK2J,UAAUjB,GAC9B/R,EAAMoI,IAAI7D,KAAKtE,OAAOyC,aAAcmR,IAEpCxQ,EAAUyP,WAAU,SAACoB,GACjBL,EAAexK,KAAK2J,UAAUkB,GAC9BlU,EAAMoI,IAAIwL,EAAK3T,OAAOyC,aAAcmR,EACxC,GAER,CACJ,EAER,C,YCjyBIM,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CAGAJ,EAAoBO,EAAID,EFzBpB7U,EAAW,GACfuU,EAAoBQ,EAAI,CAACC,EAAQC,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASC,EAAI,EAAGA,EAAItV,EAAS0F,OAAQ4P,IAAK,CAGzC,IAFA,IAAKL,EAAUC,EAAIC,GAAYnV,EAASsV,GACpCC,GAAY,EACPC,EAAI,EAAGA,EAAIP,EAASvP,OAAQ8P,MACpB,EAAXL,GAAsBC,GAAgBD,IAAa3P,OAAOC,KAAK8O,EAAoBQ,GAAGU,OAAOlR,GAASgQ,EAAoBQ,EAAExQ,GAAK0Q,EAASO,MAC9IP,EAASS,OAAOF,IAAK,IAErBD,GAAY,EACTJ,EAAWC,IAAcA,EAAeD,IAG7C,GAAGI,EAAW,CACbvV,EAAS0V,OAAOJ,IAAK,GACrB,IAAIK,EAAIT,SACER,IAANiB,IAAiBX,EAASW,EAC/B,CACD,CACA,OAAOX,CAnBP,CAJCG,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAItV,EAAS0F,OAAQ4P,EAAI,GAAKtV,EAASsV,EAAI,GAAG,GAAKH,EAAUG,IAAKtV,EAASsV,GAAKtV,EAASsV,EAAI,GACrGtV,EAASsV,GAAK,CAACL,EAAUC,EAAIC,EAqBjB,EG1BdZ,EAAoBqB,EAAI,CAAC1C,EAAK2C,IAAUrQ,OAAOsQ,UAAUpH,eAAeqH,KAAK7C,EAAK2C,G,MCKlF,IAAIG,EAAkB,CACrB,IAAK,EACL,IAAK,GAaNzB,EAAoBQ,EAAES,EAAKS,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BhN,KACvD,IAGIqL,EAAUyB,GAHThB,EAAUmB,EAAaC,GAAWlN,EAGhBmM,EAAI,EAC3B,GAAGL,EAASqB,MAAMvR,GAAgC,IAAxBiR,EAAgBjR,KAAa,CACtD,IAAIyP,KAAY4B,EACZ7B,EAAoBqB,EAAEQ,EAAa5B,KACrCD,EAAoBO,EAAEN,GAAY4B,EAAY5B,IAGhD,GAAG6B,EAAS,IAAIrB,EAASqB,EAAQ9B,EAClC,CAEA,IADG4B,GAA4BA,EAA2BhN,GACrDmM,EAAIL,EAASvP,OAAQ4P,IACzBW,EAAUhB,EAASK,GAChBf,EAAoBqB,EAAEI,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO1B,EAAoBQ,EAAEC,EAAO,EAGjCuB,EAAqBxD,KAAuC,iCAAIA,KAAuC,kCAAK,GAChHwD,EAAmBrH,QAAQgH,EAAqBtR,KAAK,KAAM,IAC3D2R,EAAmB1P,KAAOqP,EAAqBtR,KAAK,KAAM2R,EAAmB1P,KAAKjC,KAAK2R,G,KC9CvFhC,EAAoBQ,OAAEL,EAAW,CAAC,MAAM,IAAOH,EAAoB,OACnE,IAAIiC,EAAsBjC,EAAoBQ,OAAEL,EAAW,CAAC,MAAM,IAAOH,EAAoB,KAC7FiC,EAAsBjC,EAAoBQ,EAAEyB,E","sources":["webpack://filament-google-maps/webpack/runtime/chunk loaded","webpack://filament-google-maps/./resources/js/filament-google-maps.js","webpack://filament-google-maps/webpack/bootstrap","webpack://filament-google-maps/webpack/runtime/hasOwnProperty shorthand","webpack://filament-google-maps/webpack/runtime/jsonp chunk loading","webpack://filament-google-maps/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","window.filamentGoogleMaps = ($wire, config) => {\r\n    return {\r\n        map: null,\r\n        geocoder: null,\r\n        marker: null,\r\n        markerLocation: null,\r\n        layers: null,\r\n        mapEl: null,\r\n        pacEl: null,\r\n        config: {\r\n            debug: false,\r\n            autocomplete: '',\r\n            types: [],\r\n            countries: [],\r\n            placeField: 'formatted_address',\r\n            autocompleteReverse: false,\r\n            geolocate: false,\r\n            geolocateOnLoad: false,\r\n            geolocateLabel: 'Set Current Location',\r\n            draggable: true,\r\n            clickable: false,\r\n            defaultLocation: {\r\n                lat: 0,\r\n                lng: 0\r\n            },\r\n            statePath: '',\r\n            controls: {\r\n                mapTypeControl: true,\r\n                scaleControl: true,\r\n                streetViewControl: true,\r\n                rotateControl: true,\r\n                fullscreenControl: true,\r\n                searchBoxControl: false,\r\n                zoomControl: false,\r\n            },\r\n            drawingModeL: null,\r\n            drawingControl: false,\r\n            drawingControlPosition: 6,\r\n            drawingModes: {\r\n                marker: true,\r\n                circle: true,\r\n                rectangle: true,\r\n                polygon: true,\r\n                polyline: true,\r\n            },\r\n            drawingField: null,\r\n            layers: [],\r\n            geoJson: null,\r\n            geoJsonField: null,\r\n            geoJsonProperty: null,\r\n            geoJsonVisible: true,\r\n            reverseGeocodeFields: {},\r\n            defaultZoom: 8,\r\n            reverseGeocodeUsing: false,\r\n            placeUpdatedUsing: false,\r\n            gmaps: '',\r\n        },\r\n        symbols: {\r\n            '%n': [\"street_number\"],\r\n            '%z': [\"postal_code\"],\r\n            '%S': [\"street_address\", \"route\"],\r\n            '%A1': [\"administrative_area_level_1\"],\r\n            '%A2': [\"administrative_area_level_2\"],\r\n            '%A3': [\"administrative_area_level_3\"],\r\n            '%A4': [\"administrative_area_level_4\"],\r\n            '%A5': [\"administrative_area_level_5\"],\r\n            '%a1': [\"administrative_area_level_1\"],\r\n            '%a2': [\"administrative_area_level_2\"],\r\n            '%a3': [\"administrative_area_level_3\"],\r\n            '%a4': [\"administrative_area_level_4\"],\r\n            '%a5': [\"administrative_area_level_5\"],\r\n            '%L': [\"locality\", \"postal_town\"],\r\n            '%D': [\"sublocality\"],\r\n            '%C': [\"country\"],\r\n            '%c': [\"country\"],\r\n            '%p': ['premise'],\r\n            '%P': ['premise'],\r\n        },\r\n        drawingManager: null,\r\n        overlays: [],\r\n        dataLayer: null,\r\n        geoJsonDataLayer: null,\r\n        polyOptions: {\r\n            // strokeColor: '#f06eaa',\r\n            strokeColor: '#00ff00',\r\n            strokeOpacity: '0.5',\r\n            strokeWeight: 3,\r\n            fillOpacity: 0.45,\r\n            draggable: true,\r\n            editable: false,\r\n            clickable: true,\r\n            // zIndex: 1,\r\n        },\r\n        selectedShape: null,\r\n        placesService: null,\r\n        placeFields: [],\r\n\r\n        loadGMaps: function () {\r\n            if (!document.getElementById('filament-google-maps-google-maps-js')) {\r\n                const script = document.createElement('script');\r\n                script.id = 'filament-google-maps-google-maps-js';\r\n                window.filamentGoogleMapsAsyncLoad = this.createMap.bind(this);\r\n                script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\r\n                document.head.appendChild(script);\r\n            } else {\r\n                const waitForGlobal = function (key, callback) {\r\n                    if (window[key]) {\r\n                        callback();\r\n                    } else {\r\n                        setTimeout(function () {\r\n                            waitForGlobal(key, callback);\r\n                        }, 100);\r\n                    }\r\n                };\r\n\r\n                waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\r\n                    this.createMap();\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        init: function (mapEl, pacEl) {\r\n            this.mapEl = mapEl;\r\n            this.pacEl = pacEl;\r\n            this.config = {...this.config, ...config};\r\n            this.loadGMaps();\r\n        },\r\n\r\n        createMap: function () {\r\n            window.filamentGoogleMapsAPILoaded = true;\r\n\r\n            if (this.config.autocompleteReverse || Object.keys(this.config.reverseGeocodeFields).length > 0) {\r\n                this.geocoder = new google.maps.Geocoder();\r\n            }\r\n\r\n            this.map = new google.maps.Map(this.mapEl, {\r\n                center: this.getCoordinates(),\r\n                zoom: this.config.defaultZoom,\r\n                ...this.config.controls\r\n            });\r\n\r\n\r\n            this.marker = new google.maps.Marker({\r\n                draggable: this.config.draggable,\r\n                map: this.map\r\n            });\r\n\r\n            this.marker.setPosition(this.getCoordinates());\r\n\r\n            if (this.config.clickable) {\r\n                this.map.addListener('click', (event) => {\r\n                    this.markerMoved(event)\r\n                });\r\n            }\r\n\r\n            if (this.config.draggable) {\r\n                google.maps.event.addListener(this.marker, 'dragend', (event) => {\r\n                    this.markerMoved(event)\r\n                });\r\n            }\r\n\r\n            if (this.config.controls.searchBoxControl) {\r\n                const input = this.pacEl;\r\n                const searchBox = new google.maps.places.SearchBox(input);\r\n                this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n                searchBox.addListener(\"places_changed\", () => {\r\n                    input.value = ''\r\n                    this.markerLocation = searchBox.getPlaces()[0].geometry.location\r\n                })\r\n            }\r\n\r\n            if (this.config.placeUpdatedUsing) {\r\n                this.placesService = new google.maps.places.PlacesService(this.map);\r\n            }\r\n\r\n            this.placeFields = [\"address_components\", \"formatted_address\", \"geometry\", \"name\"];\r\n\r\n            if (!this.placeFields.includes(this.config.placeField)) {\r\n                this.placeFields.push(this.config.placeField);\r\n            }\r\n\r\n            if (this.config.placeUpdatedUsing) {\r\n                this.placeFields.push(\"photos\");\r\n            }\r\n\r\n            if (this.config.autocomplete) {\r\n                const geoComplete = document.getElementById(this.config.autocomplete);\r\n\r\n                if (geoComplete) {\r\n                    window.addEventListener('keydown', function (e) {\r\n                        if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\r\n                            if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\r\n                                e.preventDefault();\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }, true);\r\n\r\n                    const geocompleteOptions = {\r\n                        fields: this.placeFields,\r\n                        strictBounds: false,\r\n                        types: this.config.types,\r\n                    };\r\n\r\n                    const autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\r\n\r\n                    autocomplete.setComponentRestrictions({\r\n                        country: this.config.countries,\r\n                    })\r\n\r\n                    autocomplete.addListener(\"place_changed\", () => {\r\n                        const place = autocomplete.getPlace();\r\n\r\n                        if (!place.geometry || !place.geometry.location) {\r\n                            window.alert(\"No details available for input: '\" + place.name + \"'\");\r\n                            return;\r\n                        }\r\n\r\n                        if (place.geometry.viewport) {\r\n                            this.map.fitBounds(place.geometry.viewport);\r\n                        } else {\r\n                            this.map.setCenter(place.geometry.location);\r\n                        }\r\n\r\n                        $wire.set(this.config.autocomplete, place[this.config.placeField]);\r\n                        this.marker.setPosition(place.geometry.location);\r\n                        this.markerLocation = place.geometry.location;\r\n                        this.setCoordinates(place.geometry.location);\r\n                        this.updateGeocodeFromAddressComponents(place.address_components);\r\n                        if (this.config.placeUpdatedUsing) {\r\n                            $wire.placeUpdatedUsing(this.config.statePath, place);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (this.config.layers) {\r\n                this.layers = this.config.layers.map((layerUrl) => {\r\n                    const kmlLayer = new google.maps.KmlLayer({\r\n                        url: layerUrl,\r\n                        map: this.map,\r\n                    });\r\n\r\n                    kmlLayer.addListener(\"click\", (kmlEvent) => {\r\n                        const text = kmlEvent.featureData.description;\r\n                    });\r\n                })\r\n            }\r\n\r\n            if (this.config.geoJson) {\r\n                if (this.config.geoJsonVisible) {\r\n                    this.geoJsonDataLayer = this.map.data;\r\n                } else {\r\n                    this.geoJsonDataLayer = new google.maps.Data();\r\n                }\r\n\r\n                if (/^http/.test(this.config.geoJson)) {\r\n                    this.geoJsonDataLayer.loadGeoJson(this.config.geoJson);\r\n                } else {\r\n                    this.geoJsonDataLayer.addGeoJson(JSON.parse(this.config.geoJson));\r\n                }\r\n            }\r\n\r\n            if (this.config.geolocateOnLoad) {\r\n                this.getLocation()\r\n            }\r\n\r\n            if (this.config.geolocate && \"geolocation\" in navigator) {\r\n                const locationButton = document.createElement(\"button\");\r\n\r\n                locationButton.textContent = this.config.geolocateLabel;\r\n                locationButton.classList.add(\"custom-map-control-button\");\r\n                this.map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);\r\n\r\n                locationButton.addEventListener(\"click\", (e) => {\r\n                    e.preventDefault()\r\n                    this.getLocation()\r\n                });\r\n            }\r\n\r\n            if (this.config.drawingControl) {\r\n                this.map.data.setStyle({\r\n                    clickable: false,\r\n                    cursor: null,\r\n                    draggable: false,\r\n                    editable: false,\r\n                    fillOpacity: 0.0,\r\n                    visible: false,\r\n                    // zIndex: 0\r\n                });\r\n\r\n                this.drawingManager = new google.maps.drawing.DrawingManager({\r\n                    drawingMode: null,\r\n                    drawingControl: true,\r\n                    drawingControlOptions: {\r\n                        position: this.config.drawingControlPosition,\r\n                        drawingModes: [\r\n                            ...(this.config.drawingModes.marker ? [google.maps.drawing.OverlayType.MARKER] : []),\r\n                            ...(this.config.drawingModes.circle ? [google.maps.drawing.OverlayType.CIRCLE] : []),\r\n                            ...(this.config.drawingModes.polygon ? [google.maps.drawing.OverlayType.POLYGON] : []),\r\n                            ...(this.config.drawingModes.polyline ? [google.maps.drawing.OverlayType.POLYLINE] : []),\r\n                            ...(this.config.drawingModes.rectangle ? [google.maps.drawing.OverlayType.RECTANGLE] : []),\r\n                        ],\r\n                    },\r\n                    markerOptions: {\r\n                        draggable: true\r\n                    },\r\n                    polylineOptions: {\r\n                        draggable: true,\r\n                        editable: false\r\n                    },\r\n                    rectangleOptions: this.polyOptions,\r\n                    circleOptions: this.polyOptions,\r\n                    polygonOptions: this.polyOptions,\r\n                });\r\n\r\n                this.drawingManager.setMap(this.map);\r\n                google.maps.event.addListener(this.drawingManager, 'drawingmode_changed', () => {\r\n                    this.clearSelection()\r\n                });\r\n                // google.maps.event.addListener(this.map, 'click', () => {\r\n                //     this.clearSelection()\r\n                // });\r\n\r\n                if (this.config.drawingField) {\r\n                    this.dataLayer = new google.maps.Data();\r\n\r\n                    let geoJSON = $wire.get(this.config.drawingField);\r\n                    geoJSON && this.loadFeaturesCollection(JSON.parse(geoJSON));\r\n\r\n                    google.maps.event.addListener(this.drawingManager, 'overlaycomplete', (event) => {\r\n                        event.overlay.type = event.type;\r\n                        event.overlay.id = this.guid();\r\n                        event.overlay.feature = this.instanceFeature(event.overlay);\r\n                        this.addOverlayEvents(event.overlay);\r\n                        this.overlays.push(event.overlay);\r\n\r\n                        if (event.type != google.maps.drawing.OverlayType.MARKER) {\r\n                            // Switch back to non-drawing mode after drawing a shape.\r\n                            this.drawingManager.setDrawingMode(null);\r\n                            this.setSelection(event.overlay);\r\n                        }\r\n\r\n                        this.drawingModified();\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        markerMoved: function (event) {\r\n            this.geoJsonContains(event.latLng);\r\n            this.markerLocation = event.latLng.toJSON();\r\n            this.setCoordinates(this.markerLocation);\r\n            this.updateFromLocation(this.markerLocation)\r\n            // this.updateAutocomplete(this.markerLocation);\r\n            // this.updateGeocodeFromLocation(this.markerLocation);\r\n            // this.updateMap(this.markerLocation);\r\n            this.map.panTo(this.markerLocation);\r\n\r\n            if (this.config.placeUpdatedUsing && event.placeId) {\r\n                this.placesService.getDetails(\r\n                    {\r\n                        placeId: event.placeId,\r\n                        fields: this.placeFields\r\n                    },\r\n                    (results, status) => {\r\n                        status === 'OK' && $wire.placeUpdatedUsing(this.config.statePath, results);\r\n                    }\r\n                );\r\n            }\r\n        },\r\n        updateMapFromAlpine: function () {\r\n            const location = this.getCoordinates();\r\n            const markerLocation = this.marker.getPosition();\r\n\r\n            if (!(location.lat === markerLocation.lat() && location.lng === markerLocation.lng())) {\r\n                this.updateFromLocation(location)\r\n                this.updateMap(location);\r\n            }\r\n        },\r\n        updateMap: function (position) {\r\n            this.marker.setPosition(position);\r\n            this.map.panTo(position);\r\n        },\r\n        updateFromLocation: function (location) {\r\n            if (this.hasReverseGeocode() || this.hasReverseAutocomplete()) {\r\n                this.geocoder\r\n                    .geocode({location})\r\n                    .then((response) => {\r\n                        this.updateGeocodeFromAddressComponents(response.results[0].address_components)\r\n                        this.updateAutocompleteFromFormattedAddress(response.results[0].formatted_address)\r\n                        if (this.config.reverseGeocodeUsing) {\r\n                            $wire.reverseGeocodeUsing(this.config.statePath, response);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error.message);\r\n                    })\r\n            }\r\n        },\r\n        updateGeocodeFromAddressComponents: function (address_components) {\r\n            if (this.hasReverseGeocode()) {\r\n                const replacements = this.getReplacements(address_components);\r\n\r\n                for (const field in this.config.reverseGeocodeFields) {\r\n                    let replaced = this.config.reverseGeocodeFields[field];\r\n                    for (const replacement in replacements) {\r\n                        replaced = replaced.split(replacement).join(replacements[replacement]);\r\n                    }\r\n\r\n                    for (const symbol in this.symbols) {\r\n                        replaced = replaced.split(symbol).join('');\r\n                    }\r\n\r\n                    replaced = replaced.trim();\r\n                    $wire.set(field, replaced)\r\n                }\r\n            }\r\n        },\r\n        updateGeocodeFromLocation: function (location) {\r\n            if (this.hasReverseGeocode()) {\r\n                this.geocoder\r\n                    .geocode({location})\r\n                    .then((response) => response.results[0].address_components)\r\n                    .then((address_components) => this.updateGeocodeFromAddressComponents(address_components))\r\n                    .catch((error) => {\r\n                        console.log(error.message);\r\n                    })\r\n            }\r\n        },\r\n        updateAutocompleteFromFormattedAddress: function (address) {\r\n            if (this.hasReverseAutocomplete()) {\r\n                $wire.set(this.config.autocomplete, address);\r\n            }\r\n        },\r\n        updateAutocompleteFromLocation: function (location) {\r\n            if (this.hasReverseAutocomplete()) {\r\n                this.geocoder\r\n                    .geocode({location: location})\r\n                    .then((response) => {\r\n                        if (response.results[0]) {\r\n                            $wire.set(this.config.autocomplete, response.results[0].formatted_address);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error.message);\r\n                    })\r\n            }\r\n        },\r\n        hasReverseAutocomplete: function () {\r\n            return this.config.autocomplete && this.config.autocompleteReverse\r\n        },\r\n        hasReverseGeocode: function () {\r\n            return Object.keys(this.config.reverseGeocodeFields).length > 0 || this.config.reverseGeocodeUsing\r\n        },\r\n        setCoordinates: function (position) {\r\n            $wire.set(this.config.statePath, position);\r\n        },\r\n        getCoordinates: function () {\r\n            let location = $wire.get(this.config.statePath)\r\n            if (location === null || !location.hasOwnProperty('lat')) {\r\n                location = {lat: this.config.defaultLocation.lat, lng: this.config.defaultLocation.lng}\r\n            }\r\n            return location;\r\n        },\r\n        getLocation: function () {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                this.markerLocation = {\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                };\r\n                this.setCoordinates(this.markerLocation);\r\n                // this.updateAutocomplete(this.markerLocation);\r\n                // this.updateGeocodeFromLocation(this.markerLocation);\r\n                this.updateFromLocation(this.markerLocation);\r\n                this.map.panTo(this.markerLocation);\r\n            });\r\n        },\r\n\r\n        getReplacements: function (address_components) {\r\n            let replacements = {};\r\n\r\n            address_components.forEach(component => {\r\n                for (const symbol in this.symbols) {\r\n                    if (this.symbols[symbol].indexOf(component.types[0]) !== -1) {\r\n                        if (symbol === symbol.toLowerCase()) {\r\n                            replacements[symbol] = component.short_name;\r\n                        } else {\r\n                            replacements[symbol] = component.long_name;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.config.debug) {\r\n                console.log(replacements);\r\n            }\r\n\r\n            return replacements;\r\n        },\r\n\r\n        instanceOverlay: function (feature) {\r\n            var instance = null;\r\n            switch (feature.properties.type) {\r\n                case google.maps.drawing.OverlayType.MARKER:\r\n                    instance = new google.maps.Marker({\r\n                        id: feature.properties.id,\r\n                        type: feature.properties.type,\r\n                        position: new google.maps.LatLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),\r\n                        draggable: true\r\n                    });\r\n                    break;\r\n                case google.maps.drawing.OverlayType.RECTANGLE:\r\n                    var NE = new google.maps.LatLng(feature.geometry.coordinates[0][2][1], feature.geometry.coordinates[0][2][0]);\r\n                    var SW = new google.maps.LatLng(feature.geometry.coordinates[0][0][1], feature.geometry.coordinates[0][0][0]);\r\n                    instance = new google.maps.Rectangle(Object.assign({}, this.polyOptions, {\r\n                        id: feature.properties.id,\r\n                        type: feature.properties.type,\r\n                        // fillColor: feature.properties.color,\r\n                        bounds: new google.maps.LatLngBounds(SW, NE),\r\n                        editable: false\r\n                    }));\r\n                    break;\r\n                case google.maps.drawing.OverlayType.POLYGON:\r\n                    instance = new google.maps.Polygon(Object.assign({}, this.polyOptions, {\r\n                        id: feature.properties.id,\r\n                        type: feature.properties.type,\r\n                        // fillColor: feature.properties.color,\r\n                        paths: this.transformToMVCArray(feature.geometry.coordinates),\r\n                        editable: false\r\n                    }));\r\n                    break;\r\n                case google.maps.drawing.OverlayType.POLYLINE:\r\n                    instance = new google.maps.Polyline({\r\n                        id: feature.properties.id,\r\n                        type: feature.properties.type,\r\n                        // strokeColor: feature.properties.color,\r\n                        path: this.transformToMVCArray([feature.geometry.coordinates]).getAt(0),\r\n                        draggable: true,\r\n                        editable: false\r\n                    });\r\n                    break;\r\n                case google.maps.drawing.OverlayType.CIRCLE:\r\n                    instance = new google.maps.Circle(Object.assign({}, this.polyOptions, {\r\n                        id: feature.properties.id,\r\n                        type: feature.properties.type,\r\n                        // fillColor: feature.properties.color,\r\n                        center: new google.maps.LatLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),\r\n                        radius: feature.properties.radius,\r\n                        editable: false\r\n                    }));\r\n                    break;\r\n            }\r\n            // instance.zIndex = this.overlays.length + 1;\r\n            return instance;\r\n        },\r\n\r\n        instanceFeature: function (overlay) {\r\n            var calculatedOverlay = this.calculateGeometry(overlay);\r\n            return this.dataLayer.add(new google.maps.Data.Feature({\r\n                geometry: calculatedOverlay.geometry,\r\n                properties: Object.assign({\r\n                    id: this.guid(),\r\n                    type: overlay.type\r\n                }, calculatedOverlay.hasOwnProperty('properties') ? calculatedOverlay.properties : {})\r\n            }));\r\n        },\r\n\r\n        calculateGeometry: function (overlay, geometryOnly) {\r\n            switch (overlay.type) {\r\n                case google.maps.drawing.OverlayType.MARKER:\r\n                    return geometryOnly ? new google.maps.Data.Point(overlay.getPosition()) : {\r\n                        geometry: new google.maps.Data.Point(overlay.getPosition())\r\n                    };\r\n                case google.maps.drawing.OverlayType.RECTANGLE:\r\n                    let b = overlay.getBounds(),\r\n                        p = [b.getSouthWest(), {\r\n                            lat: b.getSouthWest().lat(),\r\n                            lng: b.getNorthEast().lng()\r\n                        }, b.getNorthEast(), {\r\n                            lng: b.getSouthWest().lng(),\r\n                            lat: b.getNorthEast().lat()\r\n                        }];\r\n                    return geometryOnly ? new google.maps.Data.Polygon([p]) : {\r\n                        geometry: new google.maps.Data.Polygon([p])\r\n                    };\r\n                case google.maps.drawing.OverlayType.POLYGON:\r\n                    return geometryOnly ? new google.maps.Data.Polygon([overlay.getPath().getArray()]) : {\r\n                        geometry: new google.maps.Data.Polygon([overlay.getPath().getArray()])\r\n                    };\r\n                case google.maps.drawing.OverlayType.POLYLINE:\r\n                    return geometryOnly ? new google.maps.Data.LineString(overlay.getPath().getArray()) : {\r\n                        geometry: new google.maps.Data.LineString(overlay.getPath().getArray())\r\n                    };\r\n                case google.maps.drawing.OverlayType.CIRCLE:\r\n                    return geometryOnly ? new google.maps.Data.Point(overlay.getCenter()) : {\r\n                        properties: {\r\n                            radius: overlay.getRadius()\r\n                        },\r\n                        geometry: new google.maps.Data.Point(overlay.getCenter())\r\n                    };\r\n            }\r\n        },\r\n\r\n        transformToMVCArray: function (a) {\r\n            let clone = new google.maps.MVCArray();\r\n\r\n            function transform($a, parent) {\r\n                if ($a.length == 2 && (!Array.isArray($a[0]) && !Array.isArray($a[1])))\r\n                    parent.push(new google.maps.LatLng($a[1], $a[0]));\r\n                for (let a = 0; a < $a.length; a++) {\r\n                    if (!Array.isArray($a[a])) continue;\r\n                    transform($a[a], (parent) ? ($a[a].length == 2 && (!Array.isArray($a[a][0]) && !Array.isArray($a[a][1]))) ? parent : parent.getAt(parent.push(new google.maps.MVCArray()) - 1) : clone.getAt(clone.push(new google.maps.MVCArray()) - 1));\r\n                }\r\n            }\r\n\r\n            function isMVCArray(array) {\r\n                return array instanceof google.maps.MVCArray;\r\n            }\r\n\r\n            transform(a);\r\n\r\n            return clone;\r\n        },\r\n\r\n        loadFeaturesCollection: function (geoJSON) {\r\n            if (Array.isArray(geoJSON.features) && geoJSON.features.length > 0) {\r\n                let bounds = new google.maps.LatLngBounds();\r\n                for (let f = 0; f < geoJSON.features.length; f++) {\r\n                    let overlay = this.instanceOverlay(geoJSON.features[f]);\r\n                    overlay.feature = this.instanceFeature(overlay);\r\n                    this.addOverlayEvents(overlay);\r\n                    overlay.feature.getGeometry().forEachLatLng(function (latlng) {\r\n                        bounds.extend(latlng);\r\n                    });\r\n                    // overlay.feature.setProperty(\"color\", features[f].properties.color);\r\n                    overlay.setMap(this.map);\r\n                    this.overlays.push(overlay);\r\n                }\r\n                this.map.fitBounds(bounds);\r\n            }\r\n        },\r\n\r\n        addOverlayEvents: function (overlay) {\r\n            switch (overlay.type) {\r\n                case google.maps.drawing.OverlayType.POLYLINE:\r\n                    google.maps.event.addListener(overlay.getPath(), 'set_at', () => {\r\n                        if (!overlay.drag) {\r\n                            overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                            this.drawingModified();\r\n                        }\r\n                    });\r\n                    google.maps.event.addListener(overlay.getPath(), 'insert_at', () => {\r\n                        overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                        this.drawingModified();\r\n                    });\r\n                    google.maps.event.addListener(overlay.getPath(), 'remove_at', () => {\r\n                        overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                        this.drawingModified();\r\n                    });\r\n                    break;\r\n                case google.maps.drawing.OverlayType.POLYGON:\r\n                    const paths = overlay.getPaths();\r\n                    for (let p = 0; p < paths.getLength(); p++)\r\n                        for (let sp = 0; sp < paths.getAt(p).getLength(); sp++) {\r\n                            google.maps.event.addListener(paths.getAt(p), 'set_at', () => {\r\n                                if (!overlay.drag) {\r\n                                    overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                                    this.drawingModified();\r\n                                }\r\n                            });\r\n                            google.maps.event.addListener(paths.getAt(p), 'insert_at', () => {\r\n                                overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                                this.drawingModified();\r\n                            });\r\n                            google.maps.event.addListener(paths.getAt(p), 'remove_at', () => {\r\n                                overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                                this.drawingModified();\r\n                            });\r\n                        }\r\n                    break;\r\n                case google.maps.drawing.OverlayType.RECTANGLE:\r\n                    google.maps.event.addListener(overlay, 'bounds_changed', () => {\r\n                        if (!overlay.drag) {\r\n                            overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                            this.drawingModified();\r\n                        }\r\n                    });\r\n                    break;\r\n                case google.maps.drawing.OverlayType.CIRCLE:\r\n                    google.maps.event.addListener(overlay, 'radius_changed', () => {\r\n                        overlay.feature.setProperty('radius', this.calculateGeometry(overlay).properties.radius);\r\n                        this.drawingModified();\r\n                    });\r\n                    break;\r\n            }\r\n            if (overlay.type !== google.maps.drawing.OverlayType.MARKER) {\r\n                let self = this;\r\n                google.maps.event.addListener(overlay, 'click', function (event) {\r\n                    self.setSelection(this);\r\n                });\r\n            }\r\n            google.maps.event.addListener(overlay, 'dragstart', () => {\r\n                overlay.drag = true;\r\n            });\r\n            google.maps.event.addListener(overlay, 'mouseup', () => {\r\n                if (overlay.drag) {\r\n                    overlay.drag = false;\r\n                    overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\r\n                    this.drawingModified();\r\n                }\r\n            });\r\n        },\r\n\r\n        drawingModified: function () {\r\n            if (this.config.drawingField) {\r\n                this.dataLayer.toGeoJson((obj) => {\r\n                    $wire.set(this.config.drawingField, JSON.stringify(obj));\r\n                });\r\n            }\r\n        },\r\n\r\n        guid: function () {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        },\r\n\r\n        setSelection: function (shape) {\r\n            this.clearSelection();\r\n            this.selectedShape = shape;\r\n            // shape.setEditable(true);\r\n            // selectColor(shape.get('fillColor') || shape.get('strokeColor'));\r\n            this.overlays.forEach(function (item) {\r\n                if (shape && item.id == shape.id) {\r\n                    if (item.getEditable()) {\r\n                        shape.setOptions({\r\n                            strokeColor: '#00ff00',\r\n                            strokeOpacity: '0.5'\r\n                        });\r\n                    } else {\r\n                        shape.setOptions({\r\n                            strokeColor: '#ff0000',\r\n                            strokeOpacity: '0.8'\r\n                        });\r\n                    }\r\n                    item.setEditable(!item.getEditable());\r\n                } else {\r\n                    item.setEditable(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        clearSelection: function () {\r\n            this.selectedShape = null;\r\n\r\n            this.overlays.forEach(function (item) {\r\n                item.setEditable(false);\r\n                item.setOptions({\r\n                    // strokeColor: '#f06eaa'\r\n                    strokeColor: '#00ff00',\r\n                    strokeOpacity: '0.5'\r\n                });\r\n            });\r\n        },\r\n\r\n        geoJsonContains: function (latLng) {\r\n            if (this.config.geoJson && this.config.geoJsonField) {\r\n                let features = [];\r\n                let dataLayer = new google.maps.Data()\r\n                this.geoJsonDataLayer.forEach((feature) => {\r\n                    if (feature.getGeometry().getType() === 'Polygon') {\r\n                        var poly = new google.maps.Polygon({\r\n                            path: feature.getGeometry().getAt(0).getArray()\r\n                        });\r\n                        if (google.maps.geometry.poly.containsLocation(latLng, poly)) {\r\n                            if (this.config.geoJsonProperty) {\r\n                                features.push(feature.getProperty(this.config.geoJsonProperty))\r\n                            } else {\r\n                                dataLayer.add(feature);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                let fieldContent;\r\n                if (this.config.geoJsonProperty) {\r\n                    fieldContent = JSON.stringify(features)\r\n                    $wire.set(this.config.geoJsonField, fieldContent);\r\n                } else {\r\n                    dataLayer.toGeoJson((gj) => {\r\n                        fieldContent = JSON.stringify(gj);\r\n                        $wire.set(this.config.geoJsonField, fieldContent);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t471: 0,\n\t822: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkfilament_google_maps\"] = self[\"webpackChunkfilament_google_maps\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\n__webpack_require__.O(undefined, [822], () => (__webpack_require__(825)))\nvar __webpack_exports__ = __webpack_require__.O(undefined, [822], () => (__webpack_require__(3)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","window","filamentGoogleMaps","$wire","config","map","geocoder","marker","markerLocation","layers","mapEl","pacEl","debug","autocomplete","types","countries","placeField","autocompleteReverse","geolocate","geolocateOnLoad","geolocateLabel","draggable","clickable","defaultLocation","lat","lng","statePath","controls","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","searchBoxControl","zoomControl","drawingModeL","drawingControl","drawingControlPosition","drawingModes","circle","rectangle","polygon","polyline","drawingField","geoJson","geoJsonField","geoJsonProperty","geoJsonVisible","reverseGeocodeFields","defaultZoom","reverseGeocodeUsing","placeUpdatedUsing","gmaps","symbols","drawingManager","overlays","dataLayer","geoJsonDataLayer","polyOptions","strokeColor","strokeOpacity","strokeWeight","fillOpacity","editable","selectedShape","placesService","placeFields","loadGMaps","document","getElementById","waitForGlobal","key","callback","setTimeout","this","createMap","bind","script","createElement","id","filamentGoogleMapsAsyncLoad","src","head","appendChild","init","_objectSpread","_this","filamentGoogleMapsAPILoaded","Object","keys","length","google","maps","Geocoder","Map","center","getCoordinates","zoom","Marker","setPosition","addListener","event","markerMoved","input","searchBox","places","SearchBox","ControlPosition","TOP_LEFT","push","value","getPlaces","geometry","location","PlacesService","includes","geoComplete","addEventListener","e","code","target","nodeName","type","preventDefault","geocompleteOptions","fields","strictBounds","Autocomplete","setComponentRestrictions","country","place","getPlace","viewport","fitBounds","setCenter","set","setCoordinates","updateGeocodeFromAddressComponents","address_components","alert","name","layerUrl","KmlLayer","url","kmlEvent","featureData","description","data","Data","test","loadGeoJson","addGeoJson","JSON","parse","getLocation","navigator","locationButton","textContent","classList","add","TOP_CENTER","setStyle","cursor","visible","drawing","DrawingManager","drawingMode","drawingControlOptions","position","concat","_toConsumableArray","OverlayType","MARKER","CIRCLE","POLYGON","POLYLINE","RECTANGLE","markerOptions","polylineOptions","rectangleOptions","circleOptions","polygonOptions","setMap","clearSelection","geoJSON","get","loadFeaturesCollection","overlay","guid","feature","instanceFeature","addOverlayEvents","setDrawingMode","setSelection","drawingModified","_this2","geoJsonContains","latLng","toJSON","updateFromLocation","panTo","placeId","getDetails","results","status","updateMapFromAlpine","getPosition","updateMap","_this3","hasReverseGeocode","hasReverseAutocomplete","geocode","then","response","updateAutocompleteFromFormattedAddress","formatted_address","error","console","log","message","replacements","getReplacements","field","replaced","replacement","split","join","symbol","trim","updateGeocodeFromLocation","_this4","address","updateAutocompleteFromLocation","_this5","hasOwnProperty","_this6","geolocation","getCurrentPosition","coords","latitude","longitude","_this7","forEach","component","indexOf","toLowerCase","short_name","long_name","instanceOverlay","instance","properties","LatLng","coordinates","NE","SW","Rectangle","assign","bounds","LatLngBounds","Polygon","paths","transformToMVCArray","Polyline","path","getAt","Circle","radius","calculatedOverlay","calculateGeometry","Feature","geometryOnly","Point","b","getBounds","p","getSouthWest","getNorthEast","getPath","getArray","LineString","getCenter","getRadius","a","clone","MVCArray","transform","$a","parent","Array","isArray","features","f","getGeometry","forEachLatLng","latlng","extend","_this8","drag","setGeometry","getPaths","getLength","sp","setProperty","self","_this9","toGeoJson","obj","stringify","s4","Math","floor","random","toString","substring","shape","item","getEditable","setOptions","setEditable","_this10","fieldContent","getType","poly","containsLocation","getProperty","gj","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","o","prop","prototype","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}